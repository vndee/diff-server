version: "3.3"

services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - stream-network
  kafka:
    image: 'bitnami/kafka:2.5.0'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:9094
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT 
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - stream-network
  webserver:
    image: nginx:latest
    ports:
      - "8002:5001"
    restart: always
    volumes:
      - ./configs/nginx/:/etc/nginx/conf.d/:ro
      - ${PWD}/static/images/:/www/data/images/

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
      POSTGRES_DB: diff-server
    volumes:
      - ./static/databases/postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      stream-network:
        aliases:
          - postgres
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - ./static/databases/pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-8001}:80"
    networks:
      - stream-network
    restart: unless-stopped

  service_server:
    build:
      context: .
      dockerfile: ./docker/server.Dockerfile
    depends_on:
      - postgres
      - kafka
      - translator_worker
      - imagen_worker
    ports:
      - "80:5000"
    volumes:
      - ${PWD}:/app/
    command: ["python", "server.py"]
    networks:
      - stream-network

  translator_worker:
    build:
      context: .
      dockerfile: ./docker/translator.Dockerfile
    depends_on:
      - kafka
    volumes:
      - ${PWD}:/app/
    command: ["python3", "translator.py"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ["0"]
              capabilities: [gpu]
    networks:
      - stream-network

  imagen_worker:
    build:
      context: .
      dockerfile: ./docker/imagen.Dockerfile
    depends_on:
      - kafka
    volumes:
      - ${PWD}:/app/
    command: ["python3", "imagen.py"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ["0"]
              capabilities: [gpu]
    networks:
      - stream-network

networks:
  stream-network:
    driver: bridge
